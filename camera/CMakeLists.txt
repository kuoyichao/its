project(cameras_simulator_nodes)

add_library(${PROJECT_NAME} SHARED src/RawDataCamerasSimulatorNode.cpp src/CamerasSimulatorNode.cpp)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_include_directories(${PROJECT_NAME} PUBLIC ${OpenCV_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} PUBLIC ${OpenCV_LIBS})
target_link_libraries(${PROJECT_NAME} PUBLIC concurra)
target_link_libraries(${PROJECT_NAME} PUBLIC common)
target_link_libraries(${PROJECT_NAME} PUBLIC msg)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PRIVATE CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

add_executable(test_${PROJECT_NAME} test/test_${PROJECT_NAME}.cpp)
target_link_libraries(test_${PROJECT_NAME} PUBLIC ${PROJECT_NAME})
target_link_libraries(test_${PROJECT_NAME} PUBLIC image_visualization_nodes)
target_link_libraries(test_${PROJECT_NAME} PUBLIC image_processing_nodes)
target_compile_features(test_${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(test_${PROJECT_NAME} PRIVATE CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

add_test(NAME ctest_${PROJECT_NAME} COMMAND test_${PROJECT_NAME} WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

project(basler_cameras_nodes)

add_library(${PROJECT_NAME} SHARED src/BaslerCamerasNode.cpp src/BaslerCameraNode.cpp src/BaslerCameraBase.cpp)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_link_libraries(${PROJECT_NAME} PUBLIC concurra)
target_link_libraries(${PROJECT_NAME} PUBLIC msg)
target_link_libraries(${PROJECT_NAME} PUBLIC boost_multi_index boost_circular_buffer)
target_link_libraries(${PROJECT_NAME} PUBLIC pylon::pylon)
target_link_libraries(${PROJECT_NAME} PUBLIC common)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PRIVATE CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

add_executable(test_${PROJECT_NAME} test/test_${PROJECT_NAME}.cpp)
target_link_libraries(test_${PROJECT_NAME} PUBLIC ${PROJECT_NAME})
target_link_libraries(test_${PROJECT_NAME} PUBLIC image_visualization_nodes)
target_link_libraries(test_${PROJECT_NAME} PUBLIC image_processing_nodes)
target_link_libraries(test_${PROJECT_NAME} PUBLIC external_nodes)
target_compile_features(test_${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(test_${PROJECT_NAME} PRIVATE CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

project(test_gpio_hardware_trigger)

if ((NOT "${gpiod_FOUND}" STREQUAL "") AND (${gpiod_FOUND}))
    add_executable(${PROJECT_NAME} test/${PROJECT_NAME}.cpp)
    target_include_directories(${PROJECT_NAME} PUBLIC ${OpenCV_INCLUDE_DIRS})
    target_link_libraries(${PROJECT_NAME} PUBLIC common)
    target_link_libraries(${PROJECT_NAME} PUBLIC ${OpenCV_LIBS})
    target_link_libraries(${PROJECT_NAME} PUBLIC PkgConfig::gpiod)
    target_link_libraries(${PROJECT_NAME} PUBLIC pylon::pylon)
    target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
    target_compile_definitions(${PROJECT_NAME} PRIVATE CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")
else ((NOT "${gpiod_FOUND}" STREQUAL "") AND (${gpiod_FOUND}))
    message(WARNING "Cannot set up project ${PROJECT_NAME}, libgpiod not found.")
endif ((NOT "${gpiod_FOUND}" STREQUAL "") AND (${gpiod_FOUND}))

project(test_camera_name_and_id)

add_executable(${PROJECT_NAME} test/${PROJECT_NAME}.cpp)
target_include_directories(${PROJECT_NAME} PUBLIC ${OpenCV_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} PUBLIC pylon::pylon)
target_link_libraries(${PROJECT_NAME} PUBLIC common)
target_link_libraries(${PROJECT_NAME} PUBLIC ${OpenCV_LIBS})
target_compile_definitions(${PROJECT_NAME} PRIVATE CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")
