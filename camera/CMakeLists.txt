project(cameras_simulator_nodes)
add_library(${PROJECT_NAME} SHARED src/RawDataCamerasSimulatorNode.cpp src/CamerasSimulatorNode.cpp)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_include_directories(${PROJECT_NAME} PUBLIC ${OpenCV_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} PUBLIC ${OpenCV_LIBS})
target_link_libraries(${PROJECT_NAME} PUBLIC node)
target_link_libraries(${PROJECT_NAME} PUBLIC msg)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

project(test_cameras_simulator_nodes)
add_executable(${PROJECT_NAME} test/${PROJECT_NAME}.cpp)
target_link_libraries(${PROJECT_NAME} PUBLIC cameras_simulator_nodes)
target_link_libraries(${PROJECT_NAME} PUBLIC image_visualization_nodes)
target_link_libraries(${PROJECT_NAME} PUBLIC image_processing_nodes)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

project(cameras_nodes)
add_library(${PROJECT_NAME} SHARED src/BaslerCamerasNode.cpp src/BaslerCameraNode.cpp src/BaslerCameraBase.cpp)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_link_libraries(${PROJECT_NAME} PUBLIC node)
target_link_libraries(${PROJECT_NAME} PUBLIC msg)
target_link_libraries(${PROJECT_NAME} PUBLIC boost_multi_index boost_circular_buffer)
target_link_libraries(${PROJECT_NAME} PUBLIC pylon::pylon)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

project(test_basler_cameras)
add_executable(${PROJECT_NAME} test/test_basler_cameras.cpp)
target_link_libraries(${PROJECT_NAME} PUBLIC cameras_nodes)
target_link_libraries(${PROJECT_NAME} PUBLIC image_visualization_nodes)
target_link_libraries(${PROJECT_NAME} PUBLIC image_processing_nodes)
target_link_libraries(${PROJECT_NAME} PUBLIC external_nodes)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")


#project(camera_nodes)
#add_library(${PROJECT_NAME} SHARED src/camera_simulator_node.cpp src/camera_node.cpp src/RawDataCamerasSimulatorNode.cpp src/CamerasSimulatorNode.cpp)
#target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
#target_include_directories(${PROJECT_NAME} PUBLIC ${Pylon_INCLUDE_DIRS})
#target_include_directories(${PROJECT_NAME} PUBLIC ${OpenCV_INCLUDE_DIRS})
#target_link_libraries(${PROJECT_NAME} PUBLIC common)
#target_link_libraries(${PROJECT_NAME} PUBLIC ${OpenCV_LIBS})
#target_link_libraries(${PROJECT_NAME} PUBLIC ${Pylon_LIBRARIES})
#target_link_libraries(${PROJECT_NAME} PUBLIC boost_circular_buffer)
#target_link_libraries(${PROJECT_NAME} PUBLIC msg)
#target_link_libraries(${PROJECT_NAME} PUBLIC node)
#target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
#target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

project(test_camera_node)
add_executable(${PROJECT_NAME} test/test_camera_node.cpp)
target_link_libraries(${PROJECT_NAME} PUBLIC camera_nodes)
target_link_libraries(${PROJECT_NAME} PUBLIC visualization_nodes)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

project(test_grabbing_raw)
add_executable(${PROJECT_NAME} test/${PROJECT_NAME}.cpp)
target_link_libraries(${PROJECT_NAME} PUBLIC camera_nodes)
target_link_libraries(${PROJECT_NAME} PUBLIC visualization_nodes)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

project(test_camera)

add_executable(${PROJECT_NAME} test/test_camera.cpp)
target_link_libraries(${PROJECT_NAME} PUBLIC camera_nodes)
target_link_libraries(${PROJECT_NAME} PUBLIC visualization_nodes)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

project(test_image_conversion)

add_executable(${PROJECT_NAME} test/test_image_conversion.cpp)
target_link_libraries(${PROJECT_NAME} PUBLIC camera_nodes)
target_link_libraries(${PROJECT_NAME} PUBLIC visualization_nodes)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

project(test_camera_name_and_id)

add_executable(${PROJECT_NAME} test/test_camera_name_and_id.cpp)
target_include_directories(${PROJECT_NAME} PUBLIC ${Pylon_INCLUDE_DIRS})
target_include_directories(${PROJECT_NAME} PUBLIC ${OpenCV_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} PUBLIC ${Pylon_LIBRARIES})
target_link_libraries(${PROJECT_NAME} PUBLIC common)
target_link_libraries(${PROJECT_NAME} PUBLIC ${OpenCV_LIBS})
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")


project(test_gpio_hardware_trigger)
add_executable(${PROJECT_NAME} test/${PROJECT_NAME}.cpp)
target_include_directories(${PROJECT_NAME} PUBLIC ${OpenCV_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} PUBLIC common)
target_link_libraries(${PROJECT_NAME} PUBLIC ${OpenCV_LIBS})
target_link_libraries(${PROJECT_NAME} PUBLIC PkgConfig::gpiod)
target_link_libraries(${PROJECT_NAME} PUBLIC pylon::pylon)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")