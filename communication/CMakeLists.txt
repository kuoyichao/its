project(communication_nodes)

add_library(${PROJECT_NAME} SHARED src/image_communication_node.cpp src/data_communication_node.cpp)
target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_include_directories(${PROJECT_NAME} PUBLIC ${OpenCV_INCLUDE_DIRS})
target_include_directories(${PROJECT_NAME} PUBLIC ${CCRTP_INCLUDE_DIRS})
target_link_libraries(${PROJECT_NAME} PUBLIC common)
target_link_libraries(${PROJECT_NAME} PUBLIC ${OpenCV_LIBS})
target_link_libraries(${PROJECT_NAME} PUBLIC msg)
target_link_libraries(${PROJECT_NAME} PUBLIC node)
target_link_libraries(${PROJECT_NAME} PUBLIC ${CCRTP_LIBRARIES})
target_link_libraries(${PROJECT_NAME} PUBLIC PkgConfig::gstreamer)
target_link_libraries(${PROJECT_NAME} PUBLIC PkgConfig::gstreamer-sdp)
target_link_libraries(${PROJECT_NAME} PUBLIC PkgConfig::gstreamer-app)
target_link_libraries(${PROJECT_NAME} PUBLIC PkgConfig::gstreamer-video)
target_link_libraries(${PROJECT_NAME} PUBLIC PkgConfig::gstreamer-rtsp-server)
target_link_libraries(${PROJECT_NAME} PUBLIC msg_yas)
target_link_libraries(${PROJECT_NAME} PUBLIC paho-mqttpp3)
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_23)
target_compile_definitions(${PROJECT_NAME} PRIVATE PAHO_MQTTPP_IMPORTS)
target_compile_definitions(${PROJECT_NAME} PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

add_executable(test_${PROJECT_NAME}_rtsp test/test_rtsp.cpp)
target_link_libraries(test_${PROJECT_NAME}_rtsp PUBLIC ${PROJECT_NAME})
target_link_libraries(test_${PROJECT_NAME}_rtsp PUBLIC camera_simulator_nodes)
target_compile_features(test_${PROJECT_NAME}_rtsp PRIVATE cxx_std_23)
target_compile_definitions(test_${PROJECT_NAME}_rtsp PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

add_executable(test_${PROJECT_NAME}_mqtt test/test_mqtt2.cpp)
target_link_libraries(test_${PROJECT_NAME}_mqtt PUBLIC ${PROJECT_NAME})
target_link_libraries(test_${PROJECT_NAME}_mqtt PUBLIC paho-mqttpp3)
target_compile_definitions(test_${PROJECT_NAME}_mqtt PRIVATE PAHO_MQTTPP_IMPORTS)
target_compile_features(test_${PROJECT_NAME}_mqtt PRIVATE cxx_std_23)
target_compile_definitions(test_${PROJECT_NAME}_mqtt PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

if (STREAMING_TEST)
    add_executable(test_${PROJECT_NAME}_udp test/test_udp.cpp)
    target_link_libraries(test_${PROJECT_NAME}_udp PUBLIC ${PROJECT_NAME})
    target_link_libraries(test_${PROJECT_NAME}_udp PUBLIC camera_simulator_nodes)
    target_compile_features(test_${PROJECT_NAME}_udp PRIVATE cxx_std_23)
    target_compile_definitions(test_${PROJECT_NAME}_udp PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

    add_executable(test_${PROJECT_NAME}_mqtt test/test_mqtt.cpp)
    target_link_libraries(test_${PROJECT_NAME}_mqtt PUBLIC ${PROJECT_NAME})
    target_link_libraries(test_${PROJECT_NAME}_mqtt PUBLIC camera_simulator_nodes)
    target_link_libraries(test_${PROJECT_NAME}_mqtt PUBLIC PkgConfig::Mosquitto)
    target_link_libraries(test_${PROJECT_NAME}_mqtt PUBLIC paho-mqttpp3)
    target_link_libraries(test_${PROJECT_NAME}_mqtt PUBLIC visualization_nodes)
    target_compile_definitions(test_${PROJECT_NAME}_mqtt PRIVATE PAHO_MQTTPP_IMPORTS)
    target_compile_features(test_${PROJECT_NAME}_mqtt PRIVATE cxx_std_23)
    target_compile_definitions(test_${PROJECT_NAME}_mqtt PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/test/sls.conf ${CMAKE_CURRENT_BINARY_DIR}/sls.conf COPYONLY)
    add_executable(sls_server test/srt-live-server.cpp)
    target_link_libraries(sls_server PUBLIC sls)

    add_executable(test_${PROJECT_NAME}_rtmp test/test_rtmp.cpp)
    target_link_libraries(test_${PROJECT_NAME}_rtmp PUBLIC ${PROJECT_NAME})
    target_link_libraries(test_${PROJECT_NAME}_rtmp PUBLIC camera_simulator_nodes)
    target_link_libraries(test_${PROJECT_NAME}_rtmp PUBLIC ${RTMP_LIB})
    target_link_libraries(test_${PROJECT_NAME}_rtmp PUBLIC ${AVCODEC_LIBRARY} ${AVFORMAT_LIBRARY} ${AVUTIL_LIBRARY} ${AVDEVICE_LIBRARY} ${AVFILTER_LIBRARY} ${SWSCALE_LIBRARY})
    target_compile_features(test_${PROJECT_NAME}_rtmp PRIVATE cxx_std_23)
    target_compile_definitions(test_${PROJECT_NAME}_rtmp PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

    add_executable(example_cv_sink test/example_cv_sink.cpp)
    target_link_libraries(example_cv_sink PUBLIC ${PROJECT_NAME})
    target_link_libraries(example_cv_sink PUBLIC camera_simulator_nodes)
    target_compile_features(example_cv_sink PRIVATE cxx_std_23)
    target_compile_definitions(example_cv_sink PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

    add_executable(example_cv_src test/example_cv_src.cpp)
    target_link_libraries(example_cv_src PUBLIC ${PROJECT_NAME})
    target_link_libraries(example_cv_src PUBLIC camera_simulator_nodes)
    target_compile_features(example_cv_src PRIVATE cxx_std_23)
    target_compile_definitions(example_cv_src PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

    add_executable(example test/example.cpp)
    target_link_libraries(example PUBLIC ${PROJECT_NAME})
    target_link_libraries(example PUBLIC camera_simulator_nodes)
    target_compile_features(example PRIVATE cxx_std_23)
    target_compile_definitions(example PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")

    add_executable(example2 test/example_udp.cpp)
    target_link_libraries(example2 PUBLIC ${PROJECT_NAME})
    target_link_libraries(example2 PUBLIC camera_simulator_nodes)
    target_compile_features(example2 PRIVATE cxx_std_23)
    target_compile_definitions(example2 PUBLIC CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}")
endif ()