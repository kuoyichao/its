services:
  ##### run cpu ########################################################################################################
  its-cpu:
    init: true
    build:
      context: .
      dockerfile: Dockerfile
      target: image
      args:
        src: cpu
    container_name: its-cpu
    volumes:
      - .:/src:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - "${IP}:8554:8554"
    network_mode: host
    environment:
      - LIVE=${LIVE}
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release /src && cmake --build . --target ${TARGET} -j 8 && exec ${TARGET_FOLDER}/${TARGET}"
    stop_signal: SIGTERM
    profiles: [ "its-cpu" ]
  ##### run cuda #######################################################################################################
  its-cuda:
    init: true
    build:
      context: .
      dockerfile: Dockerfile
      target: image
      args:
        src: cuda
    volumes:
      - .:/src:ro
      - ./result:/src/result
      - /etc/timezone:/etc/timezone:ro
    ports:
      - "${IP}:8554:8554"
    network_mode: host
    ipc: host
    pid: host
    environment:
      - LIVE=${LIVE}
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release -DCAFFE2_USE_CUDNN=True /src && cmake --build . --target ${TARGET} -j 8 && exec ${TARGET_FOLDER}/${TARGET}"
    stop_signal: SIGTERM
    profiles: [ "its-cuda", "live" ]
  ##### run rocm #######################################################################################################
  its-rocm:
    init: true
    build:
      context: .
      dockerfile: Dockerfile
      target: image
      args:
        src: rocm
    container_name: its-rocm
    volumes:
      - .:/src:ro
      - ./result:/src/result
      - /etc/timezone:/etc/timezone:ro
    devices:
      - /dev/kfd
      - /dev/dri
    security_opt:
      - seccomp:unconfined
    group_add:
      - video
    ports:
      - "${IP}:8554:8554"
    network_mode: host
    ipc: host
    pid: host
    environment:
      - LIVE=${LIVE}
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release /src && cmake --build . --target ${TARGET} -j 8 && exec ${TARGET_FOLDER}/${TARGET}"
    stop_signal: SIGTERM
    profiles: [ "its-rocm" ]
  ##### MQTT ###########################################################################################################
  mqtt:
    init: true
    image: eclipse-mosquitto:2
    container_name: mqtt
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
      - /etc/timezone:/etc/timezone:ro
    ports:
      - 1883:1883
      - 9001:9001
    network_mode: host
    profiles: [ "mqtt" ]
  hls-streaming-server:
    # ffmpeg -f lavfi -re -i smptebars=size=1280x720:rate=30 -pix_fmt yuv420p -vf "settb=AVTB,setpts='trunc(PTS/1K)*1K+st(1,trunc(RTCTIME/1K))-1K*trunc(ld(1)/1K)',drawtext=text='%{localtime}.%{eif\:1M*t-1K*trunc(t*1K)\:d}'" -c:v libx265 -preset ultrafast -b:v 600k -f mpegts udp://127.0.0.1:1234?pkt_size=1316
    image: bluenviron/mediamtx:latest-ffmpeg
    container_name: hls-streaming-server
    network_mode: host
    volumes_from:
      - caddy:ro
    volumes:
      - ./mediamtx.yml:/mediamtx.yml
      - /etc/timezone:/etc/timezone:ro
    profiles: [ "hls-streaming", "streaming_home", "streaming_live" ]
  ##### https streaming site ###########################################################################################
  caddy: # only for DNS challenge
    init: true
    build:
      context: caddy
      dockerfile: Dockerfile
    container_name: caddy
    hostname: caddy
    cap_add:
      - NET_ADMIN
    ports:
      - 443:443
      - 2019:2019
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/site:/srv
      - ./caddy/data:/data
      - ./caddy/config:/config
      - /etc/localtime:/etc/localtime:ro
    secrets:
      - CLOUDFLARE_API_TOKEN
    profiles: [ "caddy", "streaming_home", "streaming_live" ]
  ##### dyndns #########################################################################################################
  dyndns:
    init: true
    container_name: dyndns
    image: ghcr.io/sneakyhulk/cloudflare-dyndns:latest
    hostname: dyndns
    restart: unless-stopped
    ports:
      - 9017:80
    profiles: [ "dyndns", "streaming_home" ]
  ##### webserver ######################################################################################################
  webserver:
    init: true
    image: httpd:latest
    container_name: webserver
    volumes:
      - ./web:/usr/local/apache2/htdocs
    profiles: [ "webserver", "streaming_home", "streaming_live" ]
  ##### pylon test #####################################################################################################
  pypylon:
    init: true
    build:
      context: .
      dockerfile: DockerfilePython
    deploy:
      mode: replicated
      replicas: 2
    volumes:
      - .:/src:ro
      - ./result:/src/result
      - /etc/timezone:/etc/timezone:ro
    network_mode: host
    command: sh -c "python camera/test/test_multicast.py"
    stop_signal: SIGTERM
    profiles: [ "python" ]

secrets:
  CLOUDFLARE_API_TOKEN:
    file: cloudflare_api_token.txt