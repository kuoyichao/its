services:
  ##### run cpu ########################################################################################################
  its-cpu:
    extends:
      file: common.yml
      service: its
    build:
      context: .
      dockerfile: Dockerfile
      target: image
      args:
        src: cpu
    container_name: its-cpu
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release /src && cmake --build . --target its -j 8 && exec its"
    profiles: [ "its-cpu" ]
  its-cpu-test:
    extends:
      file: common.yml
      service: its
    build:
      context: .
      dockerfile: Dockerfile
      target: image
      args:
        src: cpu
    container_name: its-cpu-test
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release /src && cmake --build . --target all -j 8 && ctest"
    profiles: [ "its-cpu-test" ]
  ##### run cuda #######################################################################################################
  its-cuda:
    extends:
      file: common.yml
      service: its
    build:
      context: .
      dockerfile: Dockerfile
      target: image
      args:
        src: cuda
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release -DCAFFE2_USE_CUDNN=True /src && cmake --build . --target its -j 8 && exec its"
    profiles: [ "its-cuda" ]
  ##### run rocm #######################################################################################################
  its-rocm:
    extends:
      file: common.yml
      service: its
    build:
      context: .
      dockerfile: Dockerfile
      target: image
      args:
        src: rocm
    container_name: its-rocm
    devices:
      - /dev/kfd
      - /dev/dri
    security_opt:
      - seccomp:unconfined
    group_add:
      - video
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release /src && cmake --build . --target its -j 8 && exec its"
    profiles: [ "its-rocm" ]
  ##### MQTT ###########################################################################################################
  mqtt:
    init: true
    image: eclipse-mosquitto:2
    container_name: mqtt
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
      - /etc/timezone:/etc/timezone:ro
    ports:
      - 1883:1883
      - 9001:9001
    network_mode: host
    profiles: [ "mqtt" ]
  ##### https streaming site ###########################################################################################
  hls-streaming-server:
    image: bluenviron/mediamtx:latest-ffmpeg
    container_name: hls-streaming-server
    network_mode: host
    volumes_from:
      - caddy:ro
    volumes:
      - ./mediamtx.yml:/mediamtx.yml
      - /etc/timezone:/etc/timezone:ro
    profiles: [ "hls-streaming" ]
  caddy: # only for DNS challenge
    init: true
    build:
      context: caddy
      dockerfile: Dockerfile
    container_name: caddy
    hostname: caddy
    cap_add:
      - NET_ADMIN
    ports:
      - 443:443
      - 2019:2019
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/site:/srv
      - ./caddy/data:/data
      - ./caddy/config:/config
      - /etc/localtime:/etc/localtime:ro
    secrets:
      - CLOUDFLARE_API_TOKEN
    profiles: [ "hls-streaming" ]
  ##### webserver ######################################################################################################
  webserver:
    init: true
    image: httpd:latest
    container_name: webserver
    volumes:
      - ./web:/usr/local/apache2/htdocs
    profiles: [ "hls-streaming" ]
  ##### pylon test #####################################################################################################
  pypylon:
    init: true
    build:
      context: .
      dockerfile: DockerfilePython
    deploy:
      mode: replicated
      replicas: 2
    volumes:
      - .:/src:ro
      - ./result:/src/result
      - /etc/timezone:/etc/timezone:ro
    network_mode: host
    command: sh -c "python camera/test/test_multicast.py"
    stop_signal: SIGTERM
    profiles: [ "python" ]

secrets:
  CLOUDFLARE_API_TOKEN:
    file: cloudflare_api_token.txt