services:
  ##### build images (cpu, cuda, rocm) #################################################################################
  cpu-build:
    build:
      context: .
      dockerfile: Dockerfile
      target: image
      args:
        src: cpu
    image: its-cpu-build
    profiles: [ "cpu", "its-cpu", "streaming" ]
  cuda-build:
    build:
      context: .
      dockerfile: Dockerfile
      target: image
      args:
        src: cuda
    image: its-cuda-build
    profiles: [ "cuda", "its-cuda" ]
  rocm-build:
    build:
      context: .
      dockerfile: Dockerfile
      target: image
      args:
        src: rocm
    image: its-rocm-build
    profiles: [ "rocm", "its-rocm" ]
  ##### run ############################################################################################################
  its-cpu:
    image: its-cpu-build:latest
    depends_on:
      - cpu-build
    container_name: its-cpu
    volumes:
      - .:/src:ro
      - /etc/timezone:/etc/timezone:ro
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release /src && cmake --build . --target its -j 8 && ./its"
    stop_signal: SIGTERM
    profiles: [ "its-cpu" ]
  its-cuda:
    image: its-cuda-build:latest
    depends_on:
      - cuda-build
    container_name: its-cuda
    volumes:
      - .:/src:ro
      - /etc/timezone:/etc/timezone:ro
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release -DCAFFE2_USE_CUDNN=True /src && cmake --build . --target its -j 8 && ./its"
    stop_signal: SIGTERM
    profiles: [ "its-cuda" ]
  its-rocm:
    image: its-rocm-build:latest
    depends_on:
      - rocm-build
    container_name: its-rocm
    volumes:
      - .:/src:ro
      - /etc/timezone:/etc/timezone:ro
    devices:
      - /dev/kfd
      - /dev/dri
    security_opt:
      - seccomp:unconfined
    group_add:
      - video
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release /src && cmake --build . --target its -j 8 && ./its"
    stop_signal: SIGTERM
    profiles: [ "its-rocm" ]
  ##### MQTT ###########################################################################################################
  mqtt:
    image: eclipse-mosquitto:2
    container_name: mqtt
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
      - /etc/timezone:/etc/timezone:ro
    ports:
      - 1883:1883
      - 9001:9001
    network_mode: host
    profiles: [ "mqtt", "its-rocm" ]
  ##### streaming server test ##########################################################################################
  streaming-server2:
    image: its-cpu-build:latest
    network_mode: host
    depends_on:
      - cpu-build
    container_name: rtsp-streaming-server
    volumes:
      - .:/src:ro
      - /etc/timezone:/etc/timezone:ro
    command: sh -c "mkdir -p "/build" && cd "/build" && cmake -DCMAKE_BUILD_TYPE=Release /src && cmake --build . --target test_communication_nodes_rtsp -j 8 && communication/test_communication_nodes_rtsp"
    profiles: [ "streaming_test" ]
  streaming-server:
    # ffmpeg -f lavfi -re -i smptebars=size=1280x720:rate=30 -pix_fmt yuv420p -vf "settb=AVTB,setpts='trunc(PTS/1K)*1K+st(1,trunc(RTCTIME/1K))-1K*trunc(ld(1)/1K)',drawtext=text='%{localtime}.%{eif\:1M*t-1K*trunc(t*1K)\:d}'" -c:v libx265 -preset ultrafast -b:v 600k -f mpegts udp://127.0.0.1:1234?pkt_size=1316
    image: bluenviron/mediamtx:latest-ffmpeg
    container_name: hls-streaming-server
    network_mode: host
    volumes_from:
      - caddy:ro
    volumes:
      - ./mediamtx.yml:/mediamtx.yml
      #- ./caddy/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/s110.heyn.dev/s110.heyn.dev.crt:/server.crt
      #- ./caddy/data/caddy/certificates/acme-staging-v02.api.letsencrypt.org-directory/s110.heyn.dev/s110.heyn.dev.crt:/server.crt
      #- ./caddy/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/s110.heyn.dev/s110.heyn.dev.key:/server.key
      # - ./caddy/data/caddy/certificates/acme-staging-v02.api.letsencrypt.org-directory/s110.heyn.dev/s110.heyn.dev.key:/server.key
      - /etc/timezone:/etc/timezone:ro
    profiles: [ "streaming_test", "streaming", "streaming_home" ]
  ##### https streaming site ###########################################################################################
  caddy: # only for DNS challenge
    build:
      context: caddy
      dockerfile: Dockerfile
    container_name: caddy
    hostname: caddy
    cap_add:
      - NET_ADMIN
    ports:
      - 443:443
      - 2019:2019
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/site:/srv
      - ./caddy/data:/data
      - ./caddy/config:/config
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - ./caddy/container-vars.env
    profiles: [ "caddy", "streaming", "streaming_home" ]
  ##### dyndns #########################################################################################################
  dyndns:
    container_name: dyndns
    image: ghcr.io/sneakyhulk/cloudflare-dyndns:latest
    hostname: dyndns
    restart: unless-stopped
    ports:
      - 9017:80
    profiles: [ "dyndns", "streaming_home" ]
  ##### webserver ######################################################################################################
  webserver:
    image: httpd:latest
    container_name: webserver
    volumes:
      - ./web:/usr/local/apache2/htdocs
    profiles: [ "webserver", "streaming", "streaming_home" ]
